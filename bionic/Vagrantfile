$script_mysql = <<-SCRIPT
  apt-get update && \
  apt-get install -y mysql-server-5.7 && \
  mysql -e "create user 'phpuser'@'%' identified by 'pass';"
SCRIPT

$puppet_install = <<-SCRIPT
  apt-get update && apt-get install -y puppet
SCRIPT

$ansible_install = <<-SCRIPT
  apt-get update && \
  apt-get install -y software-properties-common && \
  apt-add-repository --yes --update ppa:ansible/ansible && \
  apt-get install -y ansible
SCRIPT

Vagrant.configure("2") do |config|
  config.vm.box = "ubuntu/bionic64"

  config.vm.provider "virtualbox" do |vb|
    vb.memory = 512
    vb.cpus = 1
  end 

  # Máquina PHP Server
  config.vm.define "phpweb" do |phpweb|
    # Network
    phpweb.vm.network "forwarded_port", guest: 8585, host: 8585  
    phpweb.vm.network "public_network", ip: "192.168.0.25" 
    
    # Provider
    phpweb.vm.provider "virtualbox" do |vb|
      vb.memory = 1024
      vb.cpus = 2
      vb.name = "ubuntu_bionic_php7"
    end 

    # Provision
    phpweb.vm.provision "shell", inline: $puppet_install
    
    phpweb.vm.provision "puppet" do |puppet|
      puppet.manifests_path = "./configs/manifests"
      puppet.manifest_file = "phpweb.pp"
    end
  end 
  
  # Máquina MySql Server com Ansible
  config.vm.define "mysqlserver" do |mysqlserver| 
    # Network
    mysqlserver.vm.network "public_network", ip: "192.168.0.22" 
    
    # Provider
    mysqlserver.vm.provider "virtualbox" do |vb|      
      vb.name = "ubuntu_bionic_mysqlserver7"
    end 

    # Provision    
    mysqlserver.vm.provision "shell", inline: "cat /vagrant/configs/id_bionic.pub >> .ssh/authorized_keys" 
  end  
    
  # Máquina Ansible
  config.vm.define "ansible" do |ansible| 
    # Network
    ansible.vm.network "public_network", ip: "192.168.0.26" 

    # Provider
    ansible.vm.provider "virtualbox" do |vb|      
      vb.name = "ubuntu_bionic_ansible"
    end 

    # Provision
    ansible.vm.provision "shell", 
      inline: "cp /vagrant/id_bionic /home/vagrant && \
              chmod 600 /home/vagrant/id_bionic && \
              chown vagrant:vagrant /home/vagrant/id_bionic"
    ansible.vm.provision "shell", inline: $ansible_install    
    ansible.vm.provision "shell", inline: "ansible-playbook -i /vagrant/configs/ansible/hosts /vagrant/configs/ansible/playbook.yml" 
  end 
  
  # Máquina com outro sistema
  config.vm.define "memcached" do |memcached|
    # Box
    memcached.vm.box = "centos/7"

    # Provider
    memcached.vm.provider "virtualbox" do |vb|
      vb.memory = 512
      vb.cpus = 1
      vb.name = "centos7_memchaced"
    end 

  end

  config.vm.define "dockerhost" do |dockerhost|
    # Provider
    dockerhost.vm.provider "virtualbox" do |vb|
      vb.memory = 512
      vb.cpus = 1
      vb.name = "ubuntu_dockerhost"
    end

    # Provision
    dockerhost.vm.provision "shell", inline: "apt-get update && apt-get install -y docker.io"
  end

  config.vm.define "kalilinux" do |kalilinux|
    kalilinux.vm.box  = "kalilinux/rolling"

    # Provider
    kalilinux.vm.provider "virtualbox" do |vb|
      
      vb.memory = 2024
      vb.cpus = 2
      vb.name = "kalilinux"
      vb.gui = false
      vb.customize ["modifyvm", :id, "--audio", "dsound"]
      vb.customize ["modifyvm", :id, "--audioin", "on"]
      vb.customize ["modifyvm", :id, "--audioout", "on"]
    end 
  end 

end

 # # Máquina MySQL Server com shell
  # config.vm.define "mysqldb" do |mysql|  
  #   # Network  
  #   mysql.vm.network "public_network", ip: "192.168.0.24"  
  
  #   # Provision
  #   mysql.vm.provision "shell", inline: "cat /configs/id_bionic.pub >> .ssh/authorized_keys" 
  #   mysql.vm.provision "shell", inline: $script_mysql
  #   mysql.vm.provision "shell", inline: "cat /configs/mysqld.cnf > /etc/mysql/mysql.conf.d/mysqld.cnf"
  #   mysql.vm.provision "shell", inline: "service mysql restart"
  
  #   # Shared Folders
  #   mysql.vm.synced_folder "./configs", "/configs"
  #   mysql.vm.synced_folder ".", "/vagrant", disabled: true
  # end